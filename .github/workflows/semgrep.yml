name: Semgrep

on:
  # Scan changed files in PRs (diff-aware scanning):
  pull_request:
    types: [opened, synchronize, ready_for_review]
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Scan mainline branches if there are changes to .github/workflows/semgrep.yml:
  push:
    branches:
      - main
      - master
    paths:
      - .github/workflows/semgrep.yml
  # Schedule the CI job (this method uses cron syntax):
  schedule:
    - cron: '30 6 1 * *' # Sets Semgrep to scan once every month

permissions:
  actions: read
  contents: read
  issues: write
  pull-requests: write

jobs:
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci --dry-run --sarif > semgrep.sarif
        env:
          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.
          # Generate a token from Semgrep AppSec Platform > Settings
          # and add it to your GitHub secrets.
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Manage Semgrep Issue
        id: semgrep-results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;

            // 1. Load & parse SARIF
            const sarif = JSON.parse(
              fs.readFileSync('semgrep.sarif', 'utf8')
            );

            // 2. Build ruleId → metadata map
            const rulesMap = {};
            for (const run of sarif.runs || []) {
              for (const r of run.tool.driver.rules || []) {
                rulesMap[r.id] = r;
              }
            }

            // 3. Flatten findings (separate suppressed and unsuppressed)
            const findings = [];
            const suppressedFindings = [];
            for (const run of sarif.runs || []) {
              for (const res of run.results || []) {
                // Skip if the issue has suppressions
                if (res.suppressions && res.suppressions.length > 0) {
                  continue;
                }

                const meta = rulesMap[res.ruleId] || {};
                const severity =
                  res.level ||
                  meta.defaultConfiguration?.level ||
                  'warning';

                const loc = res.locations?.[0]?.physicalLocation;
                const file = loc?.artifactLocation?.uri || '';
                const rg = loc?.region || {};
                const location = rg.startLine
                  ? `${rg.startLine}:` +
                    `${rg.startColumn}-` +
                    `${rg.endLine}:` +
                    `${rg.endColumn}`
                  : '';

                const message = res.message.text.replace(
                  /\r?\n/g,
                  ' '
                );
                const helpUri = meta.helpUri || '';

                const finding = {
                  file,
                  location,
                  ruleId: res.ruleId,
                  message,
                  severity,
                  helpUri,
                };

                // Separate suppressed from unsuppressed issues
                if (res.suppressions && res.suppressions.length > 0) {
                  finding.suppressionReason = res.suppressions[0].kind || 'suppressed';
                  suppressedFindings.push(finding);
                } else {
                  findings.push(finding);
                }
              }
            }

            const total = findings.length;
            const branch =
              process.env.GITHUB_HEAD_REF ||
              process.env.GITHUB_REF_NAME;
            const baseTitle = `[Semgrep:${branch}]`;
            const label = 'semgrep';

            // 4. Helpers to find existing issues
            async function searchIssues(state) {
              const q = [
                `repo:${owner}/${repo}`,
                'is:issue',
                `label:${label}`,
                `in:title "${baseTitle}"`,
                `state:${state}`,
              ].join(' ');
              const res =
                await github.rest.search.issuesAndPullRequests({ q });
              return res.data.items;
            }

            const openIssues = await searchIssues('open');
            const closedIssues = await searchIssues('closed');

            // 5. Build Markdown table if needed
            let tableHeader, tableRows, suppressedTableRows, body, title;
            const totalSuppressed = suppressedFindings.length;
            
            // Helper function to build table rows
            function buildTableRows(findingsList) {
              return findingsList
                .map((f) => {
                  const more = f.helpUri
                    ? `[link](${f.helpUri})`
                    : '';
                  return `| ${[
                    f.file,
                    f.location,
                    `\`${f.ruleId}\``,
                    f.message,
                    f.severity,
                    more,
                  ].join(' | ')} |`;
                })
                .join('\n');
            }
            
            if (total > 0 || totalSuppressed > 0) {
              tableHeader = [
                '| File | Location | Rule ID | Message | Severity | More Info |',
                '| ---- | -------- | ------- | ------- | -------- | --------- |',
              ].join('\n');
              
              let bodyParts = [];
              
              if (total > 0) {
                tableRows = buildTableRows(findings);
                bodyParts.push(`## 🚨 Active Issues (${total})\n\n${tableHeader}\n${tableRows}`);
              }
              
              if (totalSuppressed > 0) {
                suppressedTableRows = buildTableRows(suppressedFindings);
                bodyParts.push(`## 🔇 Suppressed Issues (${totalSuppressed})\n\n${tableHeader}\n${suppressedTableRows}`);
              }

              title = `${baseTitle} ${total} issue${total !== 1 ? 's' : ''} found${totalSuppressed > 0 ? ` (${totalSuppressed} suppressed)` : ''}`;
              
              body = `Semgrep detected **${total}** active issue${total !== 1 ? 's' : ''} on branch **${branch}**${totalSuppressed > 0 ? ` and **${totalSuppressed}** suppressed issue${totalSuppressed !== 1 ? 's' : ''}` : ''}.\n\n${bodyParts.join('\n\n')}`;
            } else {
              // zero findings (both active and suppressed)
              title = `${baseTitle} 0 issues found`;
              body = `Semgrep detected **no** issues on branch **${branch}**. All clear!`;
            }

            // 6. Create / update / reopen / close
            if (total > 0 || totalSuppressed > 0 || openIssues.length || closedIssues.length) {
              let issueItem;
              if (openIssues.length) {
                issueItem = openIssues[0];
                // update body/title
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: issueItem.number,
                  title,
                  body,
                });
              } else if (closedIssues.length) {
                issueItem = closedIssues[0];
                // Only reopen if there are active issues, otherwise just update the closed issue
                if (total > 0) {
                  await github.rest.issues.update({
                    owner,
                    repo,
                    issue_number: issueItem.number,
                    state: 'open',
                    title,
                    body,
                  });
                } else {
                  // Just update the content without reopening
                  await github.rest.issues.update({
                    owner,
                    repo,
                    issue_number: issueItem.number,
                    title,
                    body,
                  });
                }
              } else {
                // create new
                const newIssue =
                  await github.rest.issues.create({
                    owner,
                    repo,
                    title,
                    body,
                    labels: [label],
                  });
                issueItem = newIssue.data;
              }
              
              // If there are no active issues, close the issue immediately after creating/updating it
              if (total === 0) {
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: issueItem.number,
                  state: 'closed',
                });
              }
              // 7. If running on a PR, delete existing comments and link back
              if (context.payload.pull_request) {
                // Get all comments on the PR
                const comments = await github.rest.issues.listComments({
                  owner,
                  repo,
                  issue_number: context.payload.pull_request.number,
                });
                
                // Delete any comments that contain our unique marker
                for (const comment of comments.data) {
                  if (comment.body.includes('<!-- semgrep-workflow-comment -->')) {
                    await github.rest.issues.deleteComment({
                      owner,
                      repo,
                      comment_id: comment.id
                    });
                  }
                }
                
                // Create new comment
                let commentBody;
                const marker = '<!-- semgrep-workflow-comment -->';
                if (total > 0) {
                  // There are active issues - issue remains open
                  commentBody = totalSuppressed > 0 
                    ? `${marker}\n🔗 Semgrep detected ${total} issue${total !== 1 ? 's' : ''} (${totalSuppressed} suppressed). See details in issue #${issueItem.number}`
                    : `${marker}\n🔗 Semgrep detected ${total} issue${total !== 1 ? 's' : ''}. See details in issue #${issueItem.number}`;
                } else if (totalSuppressed > 0) {
                  // Only suppressed issues - issue is closed since no active issues
                  commentBody = `${marker}\n🔇 Semgrep found ${totalSuppressed} suppressed issue${totalSuppressed !== 1 ? 's' : ''}, closing issue #${issueItem.number} (no active issues)`;
                } else {
                  // No issues at all - issue is closed
                  commentBody = `${marker}\n✅ No Semgrep findings, closing issue #${issueItem.number}`;
                }
                
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: context.payload.pull_request.number,
                  body: commentBody,
                });
              }
            }
            
            core.setOutput('findings-count', total);
            return total;
      - name: Block CI on Security Issues
        if: steps.semgrep-results.outputs.findings-count > 0
        run: |
          echo "❌ BLOCKING: Semgrep found ${{ steps.semgrep-results.outputs.findings-count }} security issue(s)"
          echo "Please resolve all security findings before merging."
          echo "Check the GitHub issue created for detailed information."
          exit 1
